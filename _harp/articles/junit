# JUnit 4

### 1. Общее

1. **Юнит-тестирование** или **модульное тестирование** - тип тестирования, при котором проверяется корректность отдельных модулей программы. Юнит-тесты пишутся для каждой нетривиальной функциональности.
  - Целью юнит-тестирования является изолированное тестирование отдельных частей программы, чтобы показать, что по отдельности эти части являются работоспособными.
  
1. **Интеграционное тестирование** - тип тестирования, при котором отдельные программные модули объединяются и тестируются в группе. Обычно интеграционное тестирования проводится после модульного.
  - Целью интеграционного тестирования является проверка связей между компонентами, а также взаимодействия с различными частями системы.
    
1. **Системное тестирование** - тип тестирования, при котором проверяются как функциональные, так и нефункциональные требования к системе в целом, используя окружение, максимально приближенное к тому, в котором она будет развернута.
  - Целью системного тестирования является выявление дефектов, связанных с использованием ресурсов системы, результатами ее работы, удобством использования и т.д.
  
1. **JUnit** - фреймворк для юнит-тестирования Java кода. 
  - Он является одним из семества xUnit фреймворков для различных языков программирования.
  - JUnit пропогандирует TDD.
  
1. **TDD (Test-Driven Development)** - техника разработки, которая основывается на идее "сначала тестирование, потом кодинг". Подразумевается, что в первую очередь нужно написать тест для будущей функциональности, а затем саму функциональность. Такой подход увеличивает стабильность написанного кода и сводит к минимуму время, потраченное на отладку программы.

1. **UTC (Unit Test Case)** - сам тест, который проверяет некоторый кусок кода.

### 2. Аннотации

1. **@Test** - любые тесты должны быть помечены этой аннотацией.
  - С помощью данной аннотации не нужно наследоваться от TestCase класса.
  - Параметры:
    + __expected__ - указывает тип исключения, которое должно быть брошено из данного теста. Например `@Test(expected = IndexOutOfBoundsException.class)`.
    + __timeout__ - указывает время в миллисекундах, после истечения которого тест помечается как непройденный. Например `@Test(timeout = 100)`.
  - Пример:
  ```Java
  @Test
  public void addition() {
      assertEquals(12, simpleMath.add(7, 5));
  }
  ```
  
1. **@Before** - аннотация позволяет выполнять логику перед выполнением каждого теста.
  - Пример:
  ```Java
  @Before
  public void runBeforeEveryTest() {
      simpleMath = new SimpleMath();
  }
  ```

1. **@After** - аннотация позволяет выполнять логику после выполнения каждого теста.
  - Пример:
  ```Java
  @After
  public void runAfterEveryTest() {
      simpleMath = null;
  }
  ```

1. **@BeforeClass** - аннотация позволяет выполнять логику перед выполнением всех тестов в данном классе.
  - Пример:
  ```Java
  @BeforeClass
  public static void runBeforeClass() {
      // run for one time before all test cases
  }
  ```

1. **@AfterClass** - аннотация позволяет выполнять логику после выполнения всех тестов в данном классе.
  - Пример:
  ```Java
  @AfterClass
  public static void runAfterClass() {
      // run for one time after all test cases
  }
  ```
  
1. **@Ignore** - тест, помеченный данной аннотацией, будет пропускаться.
  - Параметры:
    + Параметром служит строка - причина пропуска теста.
  - Пример:
  ```Java
  @Ignore(“Not Ready to Run”)
  @Test
  public void multiplication() {
      assertEquals(15, simpleMath.multiply(3, 5));
  }
  ```
